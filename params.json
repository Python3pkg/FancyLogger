{
  "name": "Fancylogger",
  "tagline": "Fork of aubricus/print_progress.py originated from StackOverflow's Greenstick to allow using multiple progress bars along with regular message logger.",
  "body": "# FancyLogger\r\nFork of [aubricus/print_progress.py](https://gist.github.com/aubricus/f91fb55dc6ba5557fbab06119420dd6a) originated from [StackOverflow's Greenstick](http://stackoverflow.com/a/34325723) to allow using multiple progress bars along with regular message logger.  \r\n  \r\n  \r\n * Support for multiple progress bars  \r\n * Auto-scrolling message logger below the progress bars  \r\n * Configurable decimals for percentage  \r\n * Display elapsed time in human readable format from seconds to weeks  \r\n * Display a prefix to the left of the progress bar  \r\n * Display a suffix to the right of the progress bar  \r\n * Keep alive even when completed  \r\n * Displayed length of the progress bar can vary  \r\n * Multiple progress bars will stay left-aligned  \r\n * Keep space for permanent progress bar slots  \r\n * Define the maximum number of displayed messages, but log files will keep them all  \r\n * Python's multiprocessing support\r\n  \r\n ## Iterator usage\r\n ![example2-runtime.gif](https://github.com/peepall/FancyLogger/blob/master/example2-runtime.gif)\r\n  \r\n```python\r\n#!/bin/env/python\r\n# coding: utf-8\r\n\r\nimport os\r\nimport time\r\nfrom multiprocessing import Process\r\nfrom random import randrange\r\n\r\nfrom FancyLogger import FancyLogger, TaskProgress\r\n\r\n\r\ndef pid(text):\r\n    return '[{}] : {}'.format(os.getpid(), text)\r\n\r\n\r\nclass WorkerClass(Process):\r\n\r\n    def __init__(self, logger):\r\n        super(WorkerClass, self).__init__()\r\n\r\n        self.logger = logger\r\n\r\n        # Define a random progress bar\r\n        self.enumerable_data = range(randrange(50, 500))\r\n\r\n    def run(self):\r\n        self.logger.info(pid('Hello there :)'))\r\n\r\n        # Here we simulate some work using a progress bar iterator\r\n        for _ in self.logger.progress(enumerable=self.enumerable_data,\r\n                                      task_progress_object=TaskProgress(total=None,  # Total is computed by iterator\r\n                                                                        prefix=pid('Progress'),\r\n                                                                        keep_alive=False,\r\n                                                                        display_time=True)):\r\n            time.sleep(.01)\r\n\r\n        self.logger.info(pid('See you later!'))\r\n\r\n\r\nclass App(object):\r\n\r\n    def __init__(self):\r\n        super(App, self).__init__()\r\n\r\n    @classmethod\r\n    def example(cls):\r\n\r\n        # Configure and start the logger process\r\n        logger = FancyLogger(permanent_progressbar_slots=9)\r\n\r\n        # Create a random list of worker processes\r\n        workers = [WorkerClass(logger) for _ in range(randrange(5, 10))]\r\n\r\n        logger.info('[main] : Start processing things')\r\n\r\n        # Start processes\r\n        for w in workers:\r\n            w.start()\r\n\r\n        # Wait for processes one by one, using a progress bar iterator for the main thread\r\n        for w in logger.progress(enumerable=workers,\r\n                                 task_progress_object=TaskProgress(total=None,  # Total is computed by iterator\r\n                                                                   prefix='Main task',\r\n                                                                   keep_alive=True)):\r\n            w.join()\r\n\r\n        logger.info('[main] : End of processing ({} objects)'.format(len(workers)))\r\n\r\n        # Display log messages and progress bars as they are right now, to see their last state before exiting\r\n        # Indeed the logger uses a refresh rate that can be set during initialization. If you do not call flush method\r\n        # then you might miss the last messages and progress bar states that have not been displayed yet\r\n        logger.flush()\r\n        # Stop the logger process\r\n        logger.terminate()\r\n\r\nif __name__ == '__main__':\r\n    App.example()\r\n```  \r\n  \r\n## In-depth usage\r\n![example-runtime.gif](https://github.com/peepall/FancyLogger/blob/master/example-runtime.gif)\r\n  \r\n```python\r\n#!/bin/env/python\r\n# coding: utf-8\r\n\r\nimport time\r\nfrom random import randrange\r\n\r\nfrom FancyLogger import FancyLogger, TaskProgress\r\n\r\n\r\nclass App(object):\r\n\r\n    @classmethod\r\n    def example(cls):\r\n\r\n        # Different configurations for demo\r\n\r\n        # logger = FancyLogger(permanent_progressbar_slots=5)\r\n        # logger = FancyLogger(permanent_progressbar_slots=3,\r\n        #                      message_number=5,\r\n        #                      task_seconds_to_removal=1)\r\n        logger = FancyLogger(message_number=15,\r\n                             task_millis_to_removal=0)\r\n\r\n        # Define new tasks\r\n        tasks = [TaskProgress(total=150,\r\n                              prefix='Loading',\r\n                              suffix='Video game!',\r\n                              display_time=True),\r\n                 TaskProgress(total=80,\r\n                              prefix='You have to be patient please'),\r\n                 TaskProgress(total=120,\r\n                              prefix='This one is permanent',\r\n                              suffix='and I am still there :)',\r\n                              display_time=True,\r\n                              keep_alive=True),\r\n                 TaskProgress(total=50,\r\n                              prefix='Almost done !',\r\n                              display_time=True)\r\n                 ]\r\n\r\n        # Add tasks into the logger\r\n        for i, t in enumerate(tasks):\r\n            logger.set_task_object(task_id='task{}'.format(i), task_progress_object=t)\r\n\r\n        for i in range(1, 200):\r\n\r\n            random = randrange(0, 5)\r\n            if random == 0:\r\n                logger.info('This is an info :)')\r\n            elif random == 1:\r\n                logger.warning('You should read this carefully!')\r\n            elif random == 2:\r\n                logger.debug('Don\\'t bother read this')\r\n            elif random == 3:\r\n                logger.error('Something went wrong :(')\r\n            elif random == 4:\r\n                logger.critical('Ouch x_x')\r\n\r\n            random = randrange(0, 4)\r\n            if random == 0:\r\n                logger.update(task_id='task0', progress=i)\r\n            elif random == 1:\r\n                logger.update(task_id='task1', progress=i*random)\r\n            elif random == 2:\r\n                logger.update(task_id='task2', progress=i*random)\r\n            elif random == 3:\r\n                logger.update(task_id='task3', progress=i*random)\r\n\r\n            # Change settings during execution\r\n            if i == 50:\r\n                logger.set_configuration(permanent_progressbar_slots=3,\r\n                                         message_number=5)\r\n\r\n            time.sleep(0.15)\r\n\r\n        logger.info('Bye bye :)')\r\n        logger.flush()\r\n        logger.terminate()\r\n\r\nif __name__ == '__main__':\r\n    App.example()\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}